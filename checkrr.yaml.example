checkrr:
  checkpath: 
    - "/Movies/"
    - "/Movies-4k/"
    - "/tv/"
    - "/anime/"
    - "/Music/"
  database: ./checkrr.db
  debug: true
  csvfile: "./badfiles.csv"
  logfile: "./checkrr.log"
  logjson: false
  cron: "@daily"
  ignorehidden: true
  ignorepaths:
    - '/tv/ignored'
  ignoreexts:
    - .txt
    - .nfo
    - .nzb
    - .url
arr:
  radarr:
    process: false
    service: radarr # should be one of: sonarr radarr lidarr
    address: ""
    apikey: ""
    baseurl: /
    port: 7878
    mappings: # maps directories between docker and arr services
      "/mnt/user/Movies/": "/Movies/" # what radarr sees: what checkrr sees
  radarr-4k:
    process: false
    service: radarr
    address: ""
    apikey: ""
    baseurl: /
    port: 7979
    mappings:
      "/mnt/user/Movies-4k/": "/Movies-4k/"
  sonarr:
    process: false
    service: sonarr
    address: 127.0.0.1
    apikey: ""
    baseurl: /
    port: 8989
    mappings:
      "/mnt/user/tv/": "/tv/"
  anime:
    process: false
    service: sonarr
    address: 127.0.0.1
    apikey: ""
    baseurl: /
    port: 8888
    mappings:
      "/mnt/user/anime/": "/anime/"
  lidarr:
    process: false
    service: lidarr
    address: 127.0.0.1
    apikey: ""
    baseurl: /
    port: 8686
    mappings:
      "/mnt/user/Music/": "/Music"
notifications:
  discord:
    url: ""
    notificationtypes: 
      - reacquire
      - unknowndetected
      - startrun
      - endrun
  healthchecks:
    url: ""
    notificationtypes: # start and end are required
      - startrun
      - endrun
      - reacquire
  telegram:
    apitoken: ""
    username: "@username" # This must start with an @ to send to a user, otherwise, list the channel name
    notificationtypes:
      - reacquire
      - unknowndetected
      - startrun
      - endrun
  webhook:
    url: ""
    notificationtypes:
      - reacquire
      - unknowndetected
      - startrun
      - endrun
  pushbullet:
    apitoken: ""
    devices: 
      - myDevice1
      - iPhone14
    notificationtypes:
      - reacquire
      - unknowndetected
      - startrun
      - endrun
  pushover:
    apitoken: ""
    recipient: ""
    notificationtypes:
      - reacquire
      - unknowndetected
      - startrun
      - endrun
  gotify:
    url: ""
    authtoken: ""
    notificationtypes:
      - reacquire
      - unknowndetected
      - startrun
      - endrun
  splunk:
    url: ""
    token: ""
    notificationtypes:
      - reacquire
      - unknowndetected
      - startrun
      - endrun
stats: # These will slow down the runtime substantually, but... DATA
  influxdb1:
    url: ""
    user: "" # leave this and pass blank if your server requires no authentication
    pass: ""
    bucket: "checkrr" # this database must exist already. Use influx command to create the database.
  influxdb2:
    url: ""
    token: ""
    org: "default"
    bucket: "checkrr"
  splunk:
    address: "https://127.0.0.1:8088/services/collector" # You must have HTTP Event Collection enabled and configured
    token: "HEC Token" # this is the HEC token for your input. Configure it to force ingestion into a metrics index
webserver:
  port: 8585
  baseurl: "/"
  trustedproxies:
    - 127.0.0.1
